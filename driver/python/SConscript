Import("env")
Import("path")
Import("curPath")

import sys
import os

driverFiles = [
   "pysqldb/pysqldb.cpp"
   ]

clientFiles = [
   path + "SqlDB/engine/client/clientcpp.cpp"
      ]
clientLibFiles = [
   path + "SqlDB/engine/oss/oss.c",
   path + "SqlDB/engine/oss/oss.cpp",
   path + "SqlDB/engine/oss/ossUtil.c",
   path + "SqlDB/engine/oss/ossUtil.cpp",
   path + "SqlDB/engine/oss/ossMem.c",
   path + "SqlDB/engine/oss/ossMem.cpp",
   path + "SqlDB/engine/oss/ossVer.c",
   path + "SqlDB/engine/oss/ossVer.cpp",
   path + "SqlDB/engine/oss/ossSocket.cpp",
   path + "SqlDB/engine/oss/ossPrimitiveFileOp.cpp",
   path + "SqlDB/engine/pd/pd.cpp",
   path + "SqlDB/engine/pd/pdTrace.cpp",
   path + "SqlDB/engine/pd/pdFunctionList.cpp",
   path + "SqlDB/engine/client/bson/numbers.c",
   path + "SqlDB/engine/client/bson/bson.c",
   path + "SqlDB/engine/client/bson/encoding.c",
   path + "SqlDB/engine/client/common.c",
   path + "SqlDB/engine/client/cJSON.c",
   path + "SqlDB/engine/client/jstobs.c",
   path + "SqlDB/engine/client/base64c.c",
   path + "SqlDB/engine/util/fromjson.cpp",
   path + "SqlDB/engine/util/json2rawbson.c",
   path + "SqlDB/engine/util/utilStr.cpp",
   path + "SqlDB/engine/bson/bsonobj.cpp",
   path + "SqlDB/engine/bson/oid.cpp",
   path + "SqlDB/engine/bson/md5.c",
   path + "SqlDB/engine/bson/base64.cpp",
   path + "SqlDB/engine/bson/nonce.cpp",
   path + "SqlDB/engine/util/fromjson.hpp",
   path + "SqlDB/engine/util/json2rawbson.h",
   path + "SqlDB/engine/include/utilStr.hpp",
   path + "SqlDB/engine/client/base64c.h"
   ]

clientLibFiles2 = [
   path + "SqlDB/engine/client/bson/bson.h",
   path + "SqlDB/engine/client/bson/encoding.h",
   path + "SqlDB/engine/client/bson/numbers.c",
   path + "SqlDB/engine/client/bson/bson.c",
   path + "SqlDB/engine/client/bson/encoding.c"
   ]

env.Execute(Mkdir(curPath + "/build/temp"))
env.Execute(Mkdir(curPath + "/build/temp/bson"))

for file in clientFiles:
   env.Execute(Copy(curPath + "/build/temp", file))
for file in clientLibFiles:
   env.Execute(Copy(curPath + "/build/temp", file))
for file in clientLibFiles2:
   env.Execute(Copy(curPath + "/build/temp/bson", file))

curPath += "/build/temp/"
srcFiles = [
   curPath + "clientcpp.cpp",
   curPath + "oss.cpp",
   curPath + "ossUtil.cpp",
   curPath + "ossMem.cpp",
   curPath + "ossSocket.cpp",
   curPath + "ossVer.cpp",
   curPath + "ossPrimitiveFileOp.cpp",
   curPath + "pd.cpp",
   curPath + "pdTrace.cpp",
   curPath + "pdFunctionList.cpp",
   curPath + "bson/numbers.c",
   curPath + "bson/bson.c",
   curPath + "bson/encoding.c",
   curPath + "common.c",
   curPath + "cJSON.c",
   curPath + "jstobs.c",
   curPath + "base64c.c",
   curPath + "fromjson.cpp",
   curPath + "json2rawbson.c",
   curPath + "utilStr.cpp",
   curPath + "bsonobj.cpp",
   curPath + "oid.cpp",
   curPath + "md5.c",
   curPath + "base64.cpp",
   curPath + "nonce.cpp",
]

driver   = env.SharedLibrary("sdb",   [driverFiles, srcFiles])

base = []
base.append(env.Install("#/pysqldb", driver))

if sys.platform == 'win32':
   pass
else:
   act = []
   act.append("mv ./pysqldb/libsdb.so ./pysqldb/sdb.so")
   act.append("tar -zcvf pysqldb.tar.gz   \
               ./bson ./pysqldb ./setup.py \
               --exclude-vcs")

   run = env.Command(target = None, source = base, action = act )
   env.Depends(run, base)
   env.AlwaysBuild(run)
